{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport { Component, createElement } from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport PropTypes from 'prop-types';\nimport invariant from 'invariant';\nimport get from 'lodash/get';\nimport createConnectedFields from './ConnectedFields';\nimport shallowCompare from './util/shallowCompare';\nimport plain from './structure/plain';\nimport prefixName from './util/prefixName';\nimport { withReduxForm } from './ReduxFormContext';\nimport validateComponentProp from './util/validateComponentProp';\n\nvar validateNameProp = function validateNameProp(prop) {\n  if (!prop) {\n    return new Error('No \"names\" prop was specified <Fields/>');\n  }\n\n  if (!Array.isArray(prop) && !prop._isFieldArray) {\n    return new Error('Invalid prop \"names\" supplied to <Fields/>. Must be either an array of strings or the fields array generated by FieldArray.');\n  }\n};\n\nvar warnAndValidatePropType = PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func), PropTypes.objectOf(PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]))]);\nvar fieldsPropTypes = {\n  component: validateComponentProp,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  props: PropTypes.object,\n  forwardRef: PropTypes.bool,\n  validate: warnAndValidatePropType,\n  warn: warnAndValidatePropType\n};\n\nvar getFieldWarnAndValidate = function getFieldWarnAndValidate(prop, name) {\n  return Array.isArray(prop) || typeof prop === 'function' ? prop : get(prop, name, undefined);\n};\n\nvar createFields = function createFields(structure) {\n  var ConnectedFields = createConnectedFields(structure);\n\n  var Fields =\n  /*#__PURE__*/\n  function (_Component) {\n    _inheritsLoose(Fields, _Component);\n\n    function Fields(props) {\n      var _this;\n\n      _this = _Component.call(this, props) || this;\n\n      if (!props._reduxForm) {\n        throw new Error('Fields must be inside a component decorated with reduxForm()');\n      }\n\n      var error = validateNameProp(props.names);\n\n      if (error) {\n        throw error;\n      }\n\n      return _this;\n    }\n\n    var _proto = Fields.prototype;\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n      return shallowCompare(this, nextProps);\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      this.registerFields(this.props.names);\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (!plain.deepEqual(this.props.names, nextProps.names)) {\n        var props = this.props;\n        var unregister = props._reduxForm.unregister; // unregister old name\n\n        this.props.names.forEach(function (name) {\n          return unregister(prefixName(props, name));\n        }); // register new name\n\n        this.registerFields(nextProps.names);\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      var props = this.props;\n      var unregister = props._reduxForm.unregister;\n      this.props.names.forEach(function (name) {\n        return unregister(prefixName(props, name));\n      });\n    };\n\n    _proto.registerFields = function registerFields(names) {\n      var _this2 = this;\n\n      var props = this.props;\n      var register = props._reduxForm.register;\n      names.forEach(function (name) {\n        return register(prefixName(props, name), 'Field', function () {\n          return getFieldWarnAndValidate(_this2.props.validate, name);\n        }, function () {\n          return getFieldWarnAndValidate(_this2.props.warn, name);\n        });\n      });\n    };\n\n    _proto.getRenderedComponent = function getRenderedComponent() {\n      invariant(this.props.forwardRef, 'If you want to access getRenderedComponent(), ' + 'you must specify a forwardRef prop to Fields');\n      return this.refs.connected.getRenderedComponent();\n    };\n\n    _proto.render = function render() {\n      var props = this.props;\n      return createElement(ConnectedFields, _extends({}, this.props, {\n        names: this.props.names.map(function (name) {\n          return prefixName(props, name);\n        }),\n        ref: 'connected'\n      }));\n    };\n\n    _createClass(Fields, [{\n      key: \"names\",\n      get: function get() {\n        var props = this.props;\n        return this.props.names.map(function (name) {\n          return prefixName(props, name);\n        });\n      }\n    }, {\n      key: \"dirty\",\n      get: function get() {\n        return this.refs.connected.isDirty();\n      }\n    }, {\n      key: \"pristine\",\n      get: function get() {\n        return !this.dirty;\n      }\n    }, {\n      key: \"values\",\n      get: function get() {\n        return this.refs.connected && this.refs.connected.getValues();\n      }\n    }]);\n\n    return Fields;\n  }(Component);\n\n  Fields.propTypes = _extends({\n    names: function names(props, propName) {\n      return validateNameProp(props[propName]);\n    }\n  }, fieldsPropTypes);\n  polyfill(Fields);\n  return withReduxForm(Fields);\n};\n\nexport default createFields;","map":null,"metadata":{},"sourceType":"module"}