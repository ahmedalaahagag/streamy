{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport Polyfill from '../utils/polyfill.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\n/* post message to worker:\n   data: {\n       cmd: string\n       param: any\n   }\n\n   receive message from worker:\n   data: {\n       msg: string,\n       data: any\n   }\n */\n\nlet TransmuxingWorker = function (self) {\n  let TAG = 'TransmuxingWorker';\n  let controller = null;\n  let logcatListener = onLogcatCallback.bind(this);\n  Polyfill.install();\n  self.addEventListener('message', function (e) {\n    switch (e.data.cmd) {\n      case 'init':\n        controller = new TransmuxingController(e.data.param[0], e.data.param[1]);\n        controller.on(TransmuxingEvents.IO_ERROR, onIOError.bind(this));\n        controller.on(TransmuxingEvents.DEMUX_ERROR, onDemuxError.bind(this));\n        controller.on(TransmuxingEvents.INIT_SEGMENT, onInitSegment.bind(this));\n        controller.on(TransmuxingEvents.MEDIA_SEGMENT, onMediaSegment.bind(this));\n        controller.on(TransmuxingEvents.LOADING_COMPLETE, onLoadingComplete.bind(this));\n        controller.on(TransmuxingEvents.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));\n        controller.on(TransmuxingEvents.MEDIA_INFO, onMediaInfo.bind(this));\n        controller.on(TransmuxingEvents.METADATA_ARRIVED, onMetaDataArrived.bind(this));\n        controller.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));\n        controller.on(TransmuxingEvents.STATISTICS_INFO, onStatisticsInfo.bind(this));\n        controller.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));\n        break;\n\n      case 'destroy':\n        if (controller) {\n          controller.destroy();\n          controller = null;\n        }\n\n        self.postMessage({\n          msg: 'destroyed'\n        });\n        break;\n\n      case 'start':\n        controller.start();\n        break;\n\n      case 'stop':\n        controller.stop();\n        break;\n\n      case 'seek':\n        controller.seek(e.data.param);\n        break;\n\n      case 'pause':\n        controller.pause();\n        break;\n\n      case 'resume':\n        controller.resume();\n        break;\n\n      case 'logging_config':\n        {\n          let config = e.data.param;\n          LoggingControl.applyConfig(config);\n\n          if (config.enableCallback === true) {\n            LoggingControl.addLogListener(logcatListener);\n          } else {\n            LoggingControl.removeLogListener(logcatListener);\n          }\n\n          break;\n        }\n    }\n  });\n\n  function onInitSegment(type, initSegment) {\n    let obj = {\n      msg: TransmuxingEvents.INIT_SEGMENT,\n      data: {\n        type: type,\n        data: initSegment\n      }\n    };\n    self.postMessage(obj, [initSegment.data]); // data: ArrayBuffer\n  }\n\n  function onMediaSegment(type, mediaSegment) {\n    let obj = {\n      msg: TransmuxingEvents.MEDIA_SEGMENT,\n      data: {\n        type: type,\n        data: mediaSegment\n      }\n    };\n    self.postMessage(obj, [mediaSegment.data]); // data: ArrayBuffer\n  }\n\n  function onLoadingComplete() {\n    let obj = {\n      msg: TransmuxingEvents.LOADING_COMPLETE\n    };\n    self.postMessage(obj);\n  }\n\n  function onRecoveredEarlyEof() {\n    let obj = {\n      msg: TransmuxingEvents.RECOVERED_EARLY_EOF\n    };\n    self.postMessage(obj);\n  }\n\n  function onMediaInfo(mediaInfo) {\n    let obj = {\n      msg: TransmuxingEvents.MEDIA_INFO,\n      data: mediaInfo\n    };\n    self.postMessage(obj);\n  }\n\n  function onMetaDataArrived(metadata) {\n    let obj = {\n      msg: TransmuxingEvents.METADATA_ARRIVED,\n      data: metadata\n    };\n    self.postMessage(obj);\n  }\n\n  function onScriptDataArrived(data) {\n    let obj = {\n      msg: TransmuxingEvents.SCRIPTDATA_ARRIVED,\n      data: data\n    };\n    self.postMessage(obj);\n  }\n\n  function onStatisticsInfo(statInfo) {\n    let obj = {\n      msg: TransmuxingEvents.STATISTICS_INFO,\n      data: statInfo\n    };\n    self.postMessage(obj);\n  }\n\n  function onIOError(type, info) {\n    self.postMessage({\n      msg: TransmuxingEvents.IO_ERROR,\n      data: {\n        type: type,\n        info: info\n      }\n    });\n  }\n\n  function onDemuxError(type, info) {\n    self.postMessage({\n      msg: TransmuxingEvents.DEMUX_ERROR,\n      data: {\n        type: type,\n        info: info\n      }\n    });\n  }\n\n  function onRecommendSeekpoint(milliseconds) {\n    self.postMessage({\n      msg: TransmuxingEvents.RECOMMEND_SEEKPOINT,\n      data: milliseconds\n    });\n  }\n\n  function onLogcatCallback(type, str) {\n    self.postMessage({\n      msg: 'logcat_callback',\n      data: {\n        type: type,\n        logcat: str\n      }\n    });\n  }\n};\n\nexport default TransmuxingWorker;","map":null,"metadata":{},"sourceType":"module"}