{"ast":null,"code":"var _jsxFileName = \"/home/hagag/work/js traning/project/twitch/client/src/componets/streams/StreamShow.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport flv from 'flv.js';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    this.props.fetchStream(id);\n    flv.createPlayer({\n      type: 'flv',\n      url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n    });\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    const _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/home/hagag/work/js traning/project/twitch/client/src/componets/streams/StreamShow.js"],"names":["React","connect","fetchStream","flv","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","createPlayer","type","url","render","stream","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAAA,UACRC,EADQ,GACD,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MADhB,CACRF,EADQ;AAEhB,SAAKJ,KAAL,CAAWL,WAAX,CAAuBS,EAAvB;AACAR,IAAAA,GAAG,CAACW,YAAJ,CAAiB;AACbC,MAAAA,IAAI,EAAC,KADQ;AAEbC,MAAAA,GAAG,uCAAgCL,EAAhC;AAFU,KAAjB;AAIH;;AAEDM,EAAAA,MAAM,GAAG;AAEL,QAAI,CAAC,KAAKV,KAAL,CAAWW,MAAhB,EAAwB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AAJI,+BAK0B,KAAKX,KAAL,CAAWW,MALrC;AAAA,UAKGC,KALH,sBAKGA,KALH;AAAA,UAKUC,WALV,sBAKUA,WALV;AAML,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,GAAG,EAAE,KAAKZ,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAAEa,QAAAA,KAAK,EAAE;AAAT,OAAlC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHJ,CADJ;AAOH;;AA3BoC;;AA8BzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AAAEN,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACZ,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACH,CAFD;;AAIA,eAAeV,OAAO,CAACqB,eAAD,EAAkB;AAAEpB,EAAAA;AAAF,CAAlB,CAAP,CAA0CE,UAA1C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport flv from 'flv.js';\n\nclass StreamShow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.videoRef = React.createRef();\n    }\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.props.fetchStream(id);\n        flv.createPlayer({\n            type:'flv',\n            url: `http://localhost:8000/live/${id}.flv`\n        })\n    }\n\n    render() {\n\n        if (!this.props.stream) {\n            return <div>Loading...</div>\n        }\n        const { title, description } = this.props.stream;\n        return (\n            <div>\n                <video ref={this.videoRef} style={{ width: '100%' }} controls />\n                <h1>{title}</h1>\n                <h5>{description}</h5>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return { stream: state.streams[ownProps.match.params.id] }\n}\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow); "]},"metadata":{},"sourceType":"module"}