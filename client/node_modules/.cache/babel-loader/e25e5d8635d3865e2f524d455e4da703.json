{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MediaInfo {\n  constructor() {\n    this.mimeType = null;\n    this.duration = null;\n    this.hasAudio = null;\n    this.hasVideo = null;\n    this.audioCodec = null;\n    this.videoCodec = null;\n    this.audioDataRate = null;\n    this.videoDataRate = null;\n    this.audioSampleRate = null;\n    this.audioChannelCount = null;\n    this.width = null;\n    this.height = null;\n    this.fps = null;\n    this.profile = null;\n    this.level = null;\n    this.refFrames = null;\n    this.chromaFormat = null;\n    this.sarNum = null;\n    this.sarDen = null;\n    this.metadata = null;\n    this.segments = null; // MediaInfo[]\n\n    this.segmentCount = null;\n    this.hasKeyframesIndex = null;\n    this.keyframesIndex = null;\n  }\n\n  isComplete() {\n    let audioInfoComplete = this.hasAudio === false || this.hasAudio === true && this.audioCodec != null && this.audioSampleRate != null && this.audioChannelCount != null;\n    let videoInfoComplete = this.hasVideo === false || this.hasVideo === true && this.videoCodec != null && this.width != null && this.height != null && this.fps != null && this.profile != null && this.level != null && this.refFrames != null && this.chromaFormat != null && this.sarNum != null && this.sarDen != null; // keyframesIndex may not be present\n\n    return this.mimeType != null && this.duration != null && this.metadata != null && this.hasKeyframesIndex != null && audioInfoComplete && videoInfoComplete;\n  }\n\n  isSeekable() {\n    return this.hasKeyframesIndex === true;\n  }\n\n  getNearestKeyframe(milliseconds) {\n    if (this.keyframesIndex == null) {\n      return null;\n    }\n\n    let table = this.keyframesIndex;\n\n    let keyframeIdx = this._search(table.times, milliseconds);\n\n    return {\n      index: keyframeIdx,\n      milliseconds: table.times[keyframeIdx],\n      fileposition: table.filepositions[keyframeIdx]\n    };\n  }\n\n  _search(list, value) {\n    let idx = 0;\n    let last = list.length - 1;\n    let mid = 0;\n    let lbound = 0;\n    let ubound = last;\n\n    if (value < list[0]) {\n      idx = 0;\n      lbound = ubound + 1; // skip search\n    }\n\n    while (lbound <= ubound) {\n      mid = lbound + Math.floor((ubound - lbound) / 2);\n\n      if (mid === last || value >= list[mid] && value < list[mid + 1]) {\n        idx = mid;\n        break;\n      } else if (list[mid] < value) {\n        lbound = mid + 1;\n      } else {\n        ubound = mid - 1;\n      }\n    }\n\n    return idx;\n  }\n\n}\n\nexport default MediaInfo;","map":null,"metadata":{},"sourceType":"module"}