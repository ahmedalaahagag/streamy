{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _mapValues from \"lodash/mapValues\";\nimport React, { Component, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport createFieldArrayProps from './createFieldArrayProps';\nimport plain from './structure/plain';\nimport validateComponentProp from './util/validateComponentProp';\nvar propsToNotUpdateFor = ['_reduxForm', 'value'];\n\nvar createConnectedFieldArray = function createConnectedFieldArray(structure) {\n  var deepEqual = structure.deepEqual,\n      getIn = structure.getIn,\n      size = structure.size,\n      equals = structure.equals,\n      orderChanged = structure.orderChanged;\n\n  var getSyncError = function getSyncError(syncErrors, name) {\n    // For an array, the error can _ONLY_ be under _error.\n    // This is why this getSyncError is not the same as the\n    // one in Field.\n    return plain.getIn(syncErrors, name + \"._error\");\n  };\n\n  var getSyncWarning = function getSyncWarning(syncWarnings, name) {\n    // For an array, the warning can _ONLY_ be under _warning.\n    // This is why this getSyncError is not the same as the\n    // one in Field.\n    return getIn(syncWarnings, name + \"._warning\");\n  };\n\n  var ConnectedFieldArray =\n  /*#__PURE__*/\n  function (_Component) {\n    _inheritsLoose(ConnectedFieldArray, _Component);\n\n    function ConnectedFieldArray() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n      _this.ref = React.createRef();\n\n      _this.getValue = function (index) {\n        return _this.props.value && getIn(_this.props.value, String(index));\n      };\n\n      return _this;\n    }\n\n    var _proto = ConnectedFieldArray.prototype;\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n      var _this2 = this; // Update if the elements of the value array was updated.\n\n\n      var thisValue = this.props.value;\n      var nextValue = nextProps.value;\n\n      if (thisValue && nextValue) {\n        var nextValueItemsSame = equals(nextValue, thisValue); //.every(val => ~thisValue.indexOf(val))\n\n        var nextValueItemsOrderChanged = orderChanged(thisValue, nextValue);\n        var thisValueLength = thisValue.length || thisValue.size;\n        var nextValueLength = nextValue.length || nextValue.size;\n\n        if (thisValueLength !== nextValueLength || nextValueItemsSame && nextValueItemsOrderChanged || nextProps.rerenderOnEveryChange && thisValue.some(function (val, index) {\n          return !deepEqual(val, nextValue[index]);\n        })) {\n          return true;\n        }\n      }\n\n      var nextPropsKeys = Object.keys(nextProps);\n      var thisPropsKeys = Object.keys(this.props); // if we have children, we MUST update in React 16\n      // https://twitter.com/erikras/status/915866544558788608\n\n      return !!(this.props.children || nextProps.children || nextPropsKeys.length !== thisPropsKeys.length || nextPropsKeys.some(function (prop) {\n        // useful to debug rerenders\n        // if (!plain.deepEqual(this.props[ prop ], nextProps[ prop ])) {\n        //   console.info(prop, 'changed', this.props[ prop ], '==>', nextProps[ prop ])\n        // }\n        return !~propsToNotUpdateFor.indexOf(prop) && !deepEqual(_this2.props[prop], nextProps[prop]);\n      }));\n    };\n\n    _proto.getRenderedComponent = function getRenderedComponent() {\n      return this.ref.current;\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          component = _this$props.component,\n          forwardRef = _this$props.forwardRef,\n          name = _this$props.name,\n          _reduxForm = _this$props._reduxForm,\n          validate = _this$props.validate,\n          warn = _this$props.warn,\n          rerenderOnEveryChange = _this$props.rerenderOnEveryChange,\n          rest = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"forwardRef\", \"name\", \"_reduxForm\", \"validate\", \"warn\", \"rerenderOnEveryChange\"]);\n\n      var props = createFieldArrayProps(structure, name, _reduxForm.form, _reduxForm.sectionPrefix, this.getValue, rest);\n\n      if (forwardRef) {\n        props.ref = this.ref;\n      }\n\n      return createElement(component, props);\n    };\n\n    _createClass(ConnectedFieldArray, [{\n      key: \"dirty\",\n      get: function get() {\n        return this.props.dirty;\n      }\n    }, {\n      key: \"pristine\",\n      get: function get() {\n        return this.props.pristine;\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.props.value;\n      }\n    }]);\n\n    return ConnectedFieldArray;\n  }(Component);\n\n  ConnectedFieldArray.propTypes = {\n    component: validateComponentProp,\n    props: PropTypes.object,\n    rerenderOnEveryChange: PropTypes.bool\n  };\n  ConnectedFieldArray.defaultProps = {\n    rerenderOnEveryChange: false\n  };\n  var connector = connect(function (state, ownProps) {\n    var name = ownProps.name,\n        _ownProps$_reduxForm = ownProps._reduxForm,\n        initialValues = _ownProps$_reduxForm.initialValues,\n        getFormState = _ownProps$_reduxForm.getFormState;\n    var formState = getFormState(state);\n    var initial = getIn(formState, \"initial.\" + name) || initialValues && getIn(initialValues, name);\n    var value = getIn(formState, \"values.\" + name);\n    var submitting = getIn(formState, 'submitting');\n    var syncError = getSyncError(getIn(formState, 'syncErrors'), name);\n    var syncWarning = getSyncWarning(getIn(formState, 'syncWarnings'), name);\n    var pristine = deepEqual(value, initial);\n    return {\n      asyncError: getIn(formState, \"asyncErrors.\" + name + \"._error\"),\n      dirty: !pristine,\n      pristine: pristine,\n      state: getIn(formState, \"fields.\" + name),\n      submitError: getIn(formState, \"submitErrors.\" + name + \"._error\"),\n      submitFailed: getIn(formState, 'submitFailed'),\n      submitting: submitting,\n      syncError: syncError,\n      syncWarning: syncWarning,\n      value: value,\n      length: size(value)\n    };\n  }, function (dispatch, ownProps) {\n    var name = ownProps.name,\n        _reduxForm = ownProps._reduxForm;\n    var arrayInsert = _reduxForm.arrayInsert,\n        arrayMove = _reduxForm.arrayMove,\n        arrayPop = _reduxForm.arrayPop,\n        arrayPush = _reduxForm.arrayPush,\n        arrayRemove = _reduxForm.arrayRemove,\n        arrayRemoveAll = _reduxForm.arrayRemoveAll,\n        arrayShift = _reduxForm.arrayShift,\n        arraySplice = _reduxForm.arraySplice,\n        arraySwap = _reduxForm.arraySwap,\n        arrayUnshift = _reduxForm.arrayUnshift;\n    return _mapValues({\n      arrayInsert: arrayInsert,\n      arrayMove: arrayMove,\n      arrayPop: arrayPop,\n      arrayPush: arrayPush,\n      arrayRemove: arrayRemove,\n      arrayRemoveAll: arrayRemoveAll,\n      arrayShift: arrayShift,\n      arraySplice: arraySplice,\n      arraySwap: arraySwap,\n      arrayUnshift: arrayUnshift\n    }, function (actionCreator) {\n      return bindActionCreators(actionCreator.bind(null, name), dispatch);\n    });\n  }, undefined, {\n    forwardRef: true\n  });\n  return connector(ConnectedFieldArray);\n};\n\nexport default createConnectedFieldArray;","map":null,"metadata":{},"sourceType":"module"}