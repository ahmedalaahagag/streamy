{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport createFieldProps from './createFieldProps';\nimport plain from './structure/plain';\nimport onChangeValue from './events/onChangeValue';\nimport validateComponentProp from './util/validateComponentProp';\nvar propsToNotUpdateFor = ['_reduxForm'];\n\nvar createConnectedFields = function createConnectedFields(structure) {\n  var deepEqual = structure.deepEqual,\n      getIn = structure.getIn,\n      size = structure.size;\n\n  var getSyncError = function getSyncError(syncErrors, name) {\n    // Because the error for this field might not be at a level in the error structure where\n    // it can be set directly, it might need to be unwrapped from the _error property\n    return plain.getIn(syncErrors, name + \"._error\") || plain.getIn(syncErrors, name);\n  };\n\n  var getSyncWarning = function getSyncWarning(syncWarnings, name) {\n    var warning = getIn(syncWarnings, name); // Because the warning for this field might not be at a level in the warning structure where\n    // it can be set directly, it might need to be unwrapped from the _warning property\n\n    return warning && warning._warning ? warning._warning : warning;\n  };\n\n  var ConnectedFields =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(ConnectedFields, _React$Component);\n\n    function ConnectedFields(props) {\n      var _this;\n\n      _this = _React$Component.call(this, props) || this;\n      _this.onChangeFns = {};\n      _this.onFocusFns = {};\n      _this.onBlurFns = {};\n      _this.ref = React.createRef();\n\n      _this.prepareEventHandlers = function (_ref) {\n        var names = _ref.names;\n        return names.forEach(function (name) {\n          _this.onChangeFns[name] = function (event) {\n            return _this.handleChange(name, event);\n          };\n\n          _this.onFocusFns[name] = function () {\n            return _this.handleFocus(name);\n          };\n\n          _this.onBlurFns[name] = function (event) {\n            return _this.handleBlur(name, event);\n          };\n        });\n      };\n\n      _this.handleChange = function (name, event) {\n        var _this$props = _this.props,\n            dispatch = _this$props.dispatch,\n            parse = _this$props.parse,\n            _reduxForm = _this$props._reduxForm;\n        var value = onChangeValue(event, {\n          name: name,\n          parse: parse\n        });\n        dispatch(_reduxForm.change(name, value)); // call post-change callback\n\n        if (_reduxForm.asyncValidate) {\n          _reduxForm.asyncValidate(name, value, 'change');\n        }\n      };\n\n      _this.handleFocus = function (name) {\n        var _this$props2 = _this.props,\n            dispatch = _this$props2.dispatch,\n            _reduxForm = _this$props2._reduxForm;\n        dispatch(_reduxForm.focus(name));\n      };\n\n      _this.handleBlur = function (name, event) {\n        var _this$props3 = _this.props,\n            dispatch = _this$props3.dispatch,\n            parse = _this$props3.parse,\n            _reduxForm = _this$props3._reduxForm;\n        var value = onChangeValue(event, {\n          name: name,\n          parse: parse\n        }); // dispatch blur action\n\n        dispatch(_reduxForm.blur(name, value)); // call post-blur callback\n\n        if (_reduxForm.asyncValidate) {\n          _reduxForm.asyncValidate(name, value, 'blur');\n        }\n      };\n\n      _this.prepareEventHandlers(props);\n\n      return _this;\n    }\n\n    var _proto = ConnectedFields.prototype;\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (this.props.names !== nextProps.names && (size(this.props.names) !== size(nextProps.names) || nextProps.names.some(function (nextName) {\n        return !_this2.props._fields[nextName];\n      }))) {\n        // names has changed. The cached event handlers need to be updated\n        this.prepareEventHandlers(nextProps);\n      }\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n      var _this3 = this;\n\n      var nextPropsKeys = Object.keys(nextProps);\n      var thisPropsKeys = Object.keys(this.props); // if we have children, we MUST update in React 16\n      // https://twitter.com/erikras/status/915866544558788608\n\n      return !!(this.props.children || nextProps.children || nextPropsKeys.length !== thisPropsKeys.length || nextPropsKeys.some(function (prop) {\n        return !~propsToNotUpdateFor.indexOf(prop) && !deepEqual(_this3.props[prop], nextProps[prop]);\n      }));\n    };\n\n    _proto.isDirty = function isDirty() {\n      var _fields = this.props._fields;\n      return Object.keys(_fields).some(function (name) {\n        return _fields[name].dirty;\n      });\n    };\n\n    _proto.getValues = function getValues() {\n      var _fields = this.props._fields;\n      return Object.keys(_fields).reduce(function (accumulator, name) {\n        return plain.setIn(accumulator, name, _fields[name].value);\n      }, {});\n    };\n\n    _proto.getRenderedComponent = function getRenderedComponent() {\n      return this.ref.current;\n    };\n\n    _proto.render = function render() {\n      var _this4 = this;\n\n      var _this$props4 = this.props,\n          component = _this$props4.component,\n          forwardRef = _this$props4.forwardRef,\n          _fields = _this$props4._fields,\n          _reduxForm = _this$props4._reduxForm,\n          rest = _objectWithoutPropertiesLoose(_this$props4, [\"component\", \"forwardRef\", \"_fields\", \"_reduxForm\"]);\n\n      var sectionPrefix = _reduxForm.sectionPrefix,\n          form = _reduxForm.form;\n\n      var _Object$keys$reduce = Object.keys(_fields).reduce(function (accumulator, name) {\n        var connectedProps = _fields[name];\n\n        var _createFieldProps = createFieldProps(structure, name, _extends({}, connectedProps, rest, {\n          form: form,\n          onBlur: _this4.onBlurFns[name],\n          onChange: _this4.onChangeFns[name],\n          onFocus: _this4.onFocusFns[name]\n        })),\n            custom = _createFieldProps.custom,\n            fieldProps = _objectWithoutPropertiesLoose(_createFieldProps, [\"custom\"]);\n\n        accumulator.custom = custom;\n        var fieldName = sectionPrefix ? name.replace(sectionPrefix + \".\", '') : name;\n        return plain.setIn(accumulator, fieldName, fieldProps);\n      }, {}),\n          custom = _Object$keys$reduce.custom,\n          props = _objectWithoutPropertiesLoose(_Object$keys$reduce, [\"custom\"]);\n\n      if (forwardRef) {\n        props.ref = this.ref;\n      }\n\n      return React.createElement(component, _extends({}, props, custom));\n    };\n\n    return ConnectedFields;\n  }(React.Component);\n\n  ConnectedFields.propTypes = {\n    component: validateComponentProp,\n    _fields: PropTypes.object.isRequired,\n    props: PropTypes.object\n  };\n  var connector = connect(function (state, ownProps) {\n    var names = ownProps.names,\n        _ownProps$_reduxForm = ownProps._reduxForm,\n        initialValues = _ownProps$_reduxForm.initialValues,\n        getFormState = _ownProps$_reduxForm.getFormState;\n    var formState = getFormState(state);\n    return {\n      _fields: names.reduce(function (accumulator, name) {\n        var initialState = getIn(formState, \"initial.\" + name);\n        var initial = initialState !== undefined ? initialState : initialValues && getIn(initialValues, name);\n        var value = getIn(formState, \"values.\" + name);\n        var syncError = getSyncError(getIn(formState, 'syncErrors'), name);\n        var syncWarning = getSyncWarning(getIn(formState, 'syncWarnings'), name);\n        var submitting = getIn(formState, 'submitting');\n        var pristine = value === initial;\n        accumulator[name] = {\n          asyncError: getIn(formState, \"asyncErrors.\" + name),\n          asyncValidating: getIn(formState, 'asyncValidating') === name,\n          dirty: !pristine,\n          initial: initial,\n          pristine: pristine,\n          state: getIn(formState, \"fields.\" + name),\n          submitError: getIn(formState, \"submitErrors.\" + name),\n          submitFailed: getIn(formState, 'submitFailed'),\n          submitting: submitting,\n          syncError: syncError,\n          syncWarning: syncWarning,\n          value: value,\n          _value: ownProps.value // save value passed in (for radios)\n\n        };\n        return accumulator;\n      }, {})\n    };\n  }, undefined, undefined, {\n    forwardRef: true\n  });\n  return connector(ConnectedFields);\n};\n\nexport default createConnectedFields;","map":null,"metadata":{},"sourceType":"module"}