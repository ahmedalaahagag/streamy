{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport EventEmitter from 'events';\nimport PlayerEvents from './player-events.js';\nimport { createDefaultConfig } from '../config.js';\nimport { InvalidArgumentException, IllegalStateException } from '../utils/exception.js'; // Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \n\nclass NativePlayer {\n  constructor(mediaDataSource, config) {\n    this.TAG = 'NativePlayer';\n    this._type = 'NativePlayer';\n    this._emitter = new EventEmitter();\n    this._config = createDefaultConfig();\n\n    if (typeof config === 'object') {\n      Object.assign(this._config, config);\n    }\n\n    if (mediaDataSource.type.toLowerCase() === 'flv') {\n      throw new InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n    }\n\n    if (mediaDataSource.hasOwnProperty('segments')) {\n      throw new InvalidArgumentException(\"NativePlayer(\".concat(mediaDataSource.type, \") doesn't support multipart playback!\"));\n    }\n\n    this.e = {\n      onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n    };\n    this._pendingSeekTime = null;\n    this._statisticsReporter = null;\n    this._mediaDataSource = mediaDataSource;\n    this._mediaElement = null;\n  }\n\n  destroy() {\n    if (this._mediaElement) {\n      this.unload();\n      this.detachMediaElement();\n    }\n\n    this.e = null;\n    this._mediaDataSource = null;\n\n    this._emitter.removeAllListeners();\n\n    this._emitter = null;\n  }\n\n  on(event, listener) {\n    if (event === PlayerEvents.MEDIA_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        // HAVE_NOTHING\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n        });\n      }\n    } else if (event === PlayerEvents.STATISTICS_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n        });\n      }\n    }\n\n    this._emitter.addListener(event, listener);\n  }\n\n  off(event, listener) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  attachMediaElement(mediaElement) {\n    this._mediaElement = mediaElement;\n    mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n    if (this._pendingSeekTime != null) {\n      try {\n        mediaElement.currentTime = this._pendingSeekTime;\n        this._pendingSeekTime = null;\n      } catch (e) {// IE11 may throw InvalidStateError if readyState === 0\n        // Defer set currentTime operation after loadedmetadata\n      }\n    }\n  }\n\n  detachMediaElement() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n\n      this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n      this._mediaElement = null;\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n  }\n\n  load() {\n    if (!this._mediaElement) {\n      throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n    }\n\n    this._mediaElement.src = this._mediaDataSource.url;\n\n    if (this._mediaElement.readyState > 0) {\n      this._mediaElement.currentTime = 0;\n    }\n\n    this._mediaElement.preload = 'auto';\n\n    this._mediaElement.load();\n\n    this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n  }\n\n  unload() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n  }\n\n  play() {\n    return this._mediaElement.play();\n  }\n\n  pause() {\n    this._mediaElement.pause();\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get buffered() {\n    return this._mediaElement.buffered;\n  }\n\n  get duration() {\n    return this._mediaElement.duration;\n  }\n\n  get volume() {\n    return this._mediaElement.volume;\n  }\n\n  set volume(value) {\n    this._mediaElement.volume = value;\n  }\n\n  get muted() {\n    return this._mediaElement.muted;\n  }\n\n  set muted(muted) {\n    this._mediaElement.muted = muted;\n  }\n\n  get currentTime() {\n    if (this._mediaElement) {\n      return this._mediaElement.currentTime;\n    }\n\n    return 0;\n  }\n\n  set currentTime(seconds) {\n    if (this._mediaElement) {\n      this._mediaElement.currentTime = seconds;\n    } else {\n      this._pendingSeekTime = seconds;\n    }\n  }\n\n  get mediaInfo() {\n    let mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n    let info = {\n      mimeType: mediaPrefix + this._mediaDataSource.type\n    };\n\n    if (this._mediaElement) {\n      info.duration = Math.floor(this._mediaElement.duration * 1000);\n\n      if (this._mediaElement instanceof HTMLVideoElement) {\n        info.width = this._mediaElement.videoWidth;\n        info.height = this._mediaElement.videoHeight;\n      }\n    }\n\n    return info;\n  }\n\n  get statisticsInfo() {\n    let info = {\n      playerType: this._type,\n      url: this._mediaDataSource.url\n    };\n\n    if (!(this._mediaElement instanceof HTMLVideoElement)) {\n      return info;\n    }\n\n    let hasQualityInfo = true;\n    let decoded = 0;\n    let dropped = 0;\n\n    if (this._mediaElement.getVideoPlaybackQuality) {\n      let quality = this._mediaElement.getVideoPlaybackQuality();\n\n      decoded = quality.totalVideoFrames;\n      dropped = quality.droppedVideoFrames;\n    } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n      decoded = this._mediaElement.webkitDecodedFrameCount;\n      dropped = this._mediaElement.webkitDroppedFrameCount;\n    } else {\n      hasQualityInfo = false;\n    }\n\n    if (hasQualityInfo) {\n      info.decodedFrames = decoded;\n      info.droppedFrames = dropped;\n    }\n\n    return info;\n  }\n\n  _onvLoadedMetadata(e) {\n    if (this._pendingSeekTime != null) {\n      this._mediaElement.currentTime = this._pendingSeekTime;\n      this._pendingSeekTime = null;\n    }\n\n    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n  }\n\n  _reportStatisticsInfo() {\n    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n  }\n\n}\n\nexport default NativePlayer;","map":null,"metadata":{},"sourceType":"module"}