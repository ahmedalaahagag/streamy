{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NotImplementedException } from '../utils/exception.js';\nexport const LoaderStatus = {\n  kIdle: 0,\n  kConnecting: 1,\n  kBuffering: 2,\n  kError: 3,\n  kComplete: 4\n};\nexport const LoaderErrors = {\n  OK: 'OK',\n  EXCEPTION: 'Exception',\n  HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',\n  CONNECTING_TIMEOUT: 'ConnectingTimeout',\n  EARLY_EOF: 'EarlyEof',\n  UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'\n};\n/* Loader has callbacks which have following prototypes:\n *     function onContentLengthKnown(contentLength: number): void\n *     function onURLRedirect(url: string): void\n *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void\n *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void\n *     function onComplete(rangeFrom: number, rangeTo: number): void\n */\n\nexport class BaseLoader {\n  constructor(typeName) {\n    this._type = typeName || 'undefined';\n    this._status = LoaderStatus.kIdle;\n    this._needStash = false; // callbacks\n\n    this._onContentLengthKnown = null;\n    this._onURLRedirect = null;\n    this._onDataArrival = null;\n    this._onError = null;\n    this._onComplete = null;\n  }\n\n  destroy() {\n    this._status = LoaderStatus.kIdle;\n    this._onContentLengthKnown = null;\n    this._onURLRedirect = null;\n    this._onDataArrival = null;\n    this._onError = null;\n    this._onComplete = null;\n  }\n\n  isWorking() {\n    return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  get needStashBuffer() {\n    return this._needStash;\n  }\n\n  get onContentLengthKnown() {\n    return this._onContentLengthKnown;\n  }\n\n  set onContentLengthKnown(callback) {\n    this._onContentLengthKnown = callback;\n  }\n\n  get onURLRedirect() {\n    return this._onURLRedirect;\n  }\n\n  set onURLRedirect(callback) {\n    this._onURLRedirect = callback;\n  }\n\n  get onDataArrival() {\n    return this._onDataArrival;\n  }\n\n  set onDataArrival(callback) {\n    this._onDataArrival = callback;\n  }\n\n  get onError() {\n    return this._onError;\n  }\n\n  set onError(callback) {\n    this._onError = callback;\n  }\n\n  get onComplete() {\n    return this._onComplete;\n  }\n\n  set onComplete(callback) {\n    this._onComplete = callback;\n  } // pure virtual\n\n\n  open(dataSource, range) {\n    throw new NotImplementedException('Unimplemented abstract function!');\n  }\n\n  abort() {\n    throw new NotImplementedException('Unimplemented abstract function!');\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}