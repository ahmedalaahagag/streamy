{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport IOController from '../io/io-controller.js';\nimport { createDefaultConfig } from '../config.js';\n\nclass Features {\n  static supportMSEH264Playback() {\n    return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n  }\n\n  static supportNetworkStreamIO() {\n    let ioctl = new IOController({}, createDefaultConfig());\n    let loaderType = ioctl.loaderType;\n    ioctl.destroy();\n    return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';\n  }\n\n  static getNetworkLoaderTypeName() {\n    let ioctl = new IOController({}, createDefaultConfig());\n    let loaderType = ioctl.loaderType;\n    ioctl.destroy();\n    return loaderType;\n  }\n\n  static supportNativeMediaPlayback(mimeType) {\n    if (Features.videoElement == undefined) {\n      Features.videoElement = window.document.createElement('video');\n    }\n\n    let canPlay = Features.videoElement.canPlayType(mimeType);\n    return canPlay === 'probably' || canPlay == 'maybe';\n  }\n\n  static getFeatureList() {\n    let features = {\n      mseFlvPlayback: false,\n      mseLiveFlvPlayback: false,\n      networkStreamIO: false,\n      networkLoaderName: '',\n      nativeMP4H264Playback: false,\n      nativeWebmVP8Playback: false,\n      nativeWebmVP9Playback: false\n    };\n    features.mseFlvPlayback = Features.supportMSEH264Playback();\n    features.networkStreamIO = Features.supportNetworkStreamIO();\n    features.networkLoaderName = Features.getNetworkLoaderTypeName();\n    features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;\n    features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"');\n    features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp8.0, vorbis\"');\n    features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp9\"');\n    return features;\n  }\n\n}\n\nexport default Features;","map":null,"metadata":{},"sourceType":"module"}