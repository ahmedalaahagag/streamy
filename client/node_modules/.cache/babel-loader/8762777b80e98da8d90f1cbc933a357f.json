{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IllegalStateException, InvalidArgumentException } from '../utils/exception.js'; // Exponential-Golomb buffer decoder\n\nclass ExpGolomb {\n  constructor(uint8array) {\n    this.TAG = 'ExpGolomb';\n    this._buffer = uint8array;\n    this._buffer_index = 0;\n    this._total_bytes = uint8array.byteLength;\n    this._total_bits = uint8array.byteLength * 8;\n    this._current_word = 0;\n    this._current_word_bits_left = 0;\n  }\n\n  destroy() {\n    this._buffer = null;\n  }\n\n  _fillCurrentWord() {\n    let buffer_bytes_left = this._total_bytes - this._buffer_index;\n    if (buffer_bytes_left <= 0) throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n    let bytes_read = Math.min(4, buffer_bytes_left);\n    let word = new Uint8Array(4);\n    word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n    this._current_word = new DataView(word.buffer).getUint32(0, false);\n    this._buffer_index += bytes_read;\n    this._current_word_bits_left = bytes_read * 8;\n  }\n\n  readBits(bits) {\n    if (bits > 32) throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n    if (bits <= this._current_word_bits_left) {\n      let result = this._current_word >>> 32 - bits;\n      this._current_word <<= bits;\n      this._current_word_bits_left -= bits;\n      return result;\n    }\n\n    let result = this._current_word_bits_left ? this._current_word : 0;\n    result = result >>> 32 - this._current_word_bits_left;\n    let bits_need_left = bits - this._current_word_bits_left;\n\n    this._fillCurrentWord();\n\n    let bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n    let result2 = this._current_word >>> 32 - bits_read_next;\n    this._current_word <<= bits_read_next;\n    this._current_word_bits_left -= bits_read_next;\n    result = result << bits_read_next | result2;\n    return result;\n  }\n\n  readBool() {\n    return this.readBits(1) === 1;\n  }\n\n  readByte() {\n    return this.readBits(8);\n  }\n\n  _skipLeadingZero() {\n    let zero_count;\n\n    for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n      if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {\n        this._current_word <<= zero_count;\n        this._current_word_bits_left -= zero_count;\n        return zero_count;\n      }\n    }\n\n    this._fillCurrentWord();\n\n    return zero_count + this._skipLeadingZero();\n  }\n\n  readUEG() {\n    // unsigned exponential golomb\n    let leading_zeros = this._skipLeadingZero();\n\n    return this.readBits(leading_zeros + 1) - 1;\n  }\n\n  readSEG() {\n    // signed exponential golomb\n    let value = this.readUEG();\n\n    if (value & 0x01) {\n      return value + 1 >>> 1;\n    } else {\n      return -1 * (value >>> 1);\n    }\n  }\n\n}\n\nexport default ExpGolomb;","map":null,"metadata":{},"sourceType":"module"}