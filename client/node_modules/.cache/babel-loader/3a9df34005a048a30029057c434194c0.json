{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\nimport TransmuxingWorker from './transmuxing-worker.js';\nimport MediaInfo from './media-info.js';\n\nclass Transmuxer {\n  constructor(mediaDataSource, config) {\n    this.TAG = 'Transmuxer';\n    this._emitter = new EventEmitter();\n\n    if (config.enableWorker && typeof Worker !== 'undefined') {\n      try {\n        let work = require('webworkify');\n\n        this._worker = work(TransmuxingWorker);\n        this._workerDestroying = false;\n\n        this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n\n        this._worker.postMessage({\n          cmd: 'init',\n          param: [mediaDataSource, config]\n        });\n\n        this.e = {\n          onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n        };\n        LoggingControl.registerListener(this.e.onLoggingConfigChanged);\n\n        this._worker.postMessage({\n          cmd: 'logging_config',\n          param: LoggingControl.getConfig()\n        });\n      } catch (error) {\n        Log.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n        this._worker = null;\n        this._controller = new TransmuxingController(mediaDataSource, config);\n      }\n    } else {\n      this._controller = new TransmuxingController(mediaDataSource, config);\n    }\n\n    if (this._controller) {\n      let ctl = this._controller;\n      ctl.on(TransmuxingEvents.IO_ERROR, this._onIOError.bind(this));\n      ctl.on(TransmuxingEvents.DEMUX_ERROR, this._onDemuxError.bind(this));\n      ctl.on(TransmuxingEvents.INIT_SEGMENT, this._onInitSegment.bind(this));\n      ctl.on(TransmuxingEvents.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n      ctl.on(TransmuxingEvents.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n      ctl.on(TransmuxingEvents.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n      ctl.on(TransmuxingEvents.MEDIA_INFO, this._onMediaInfo.bind(this));\n      ctl.on(TransmuxingEvents.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n      ctl.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n      ctl.on(TransmuxingEvents.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n      ctl.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n    }\n  }\n\n  destroy() {\n    if (this._worker) {\n      if (!this._workerDestroying) {\n        this._workerDestroying = true;\n\n        this._worker.postMessage({\n          cmd: 'destroy'\n        });\n\n        LoggingControl.removeListener(this.e.onLoggingConfigChanged);\n        this.e = null;\n      }\n    } else {\n      this._controller.destroy();\n\n      this._controller = null;\n    }\n\n    this._emitter.removeAllListeners();\n\n    this._emitter = null;\n  }\n\n  on(event, listener) {\n    this._emitter.addListener(event, listener);\n  }\n\n  off(event, listener) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  hasWorker() {\n    return this._worker != null;\n  }\n\n  open() {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'start'\n      });\n    } else {\n      this._controller.start();\n    }\n  }\n\n  close() {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'stop'\n      });\n    } else {\n      this._controller.stop();\n    }\n  }\n\n  seek(milliseconds) {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'seek',\n        param: milliseconds\n      });\n    } else {\n      this._controller.seek(milliseconds);\n    }\n  }\n\n  pause() {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'pause'\n      });\n    } else {\n      this._controller.pause();\n    }\n  }\n\n  resume() {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'resume'\n      });\n    } else {\n      this._controller.resume();\n    }\n  }\n\n  _onInitSegment(type, initSegment) {\n    // do async invoke\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\n    });\n  }\n\n  _onMediaSegment(type, mediaSegment) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\n    });\n  }\n\n  _onLoadingComplete() {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\n    });\n  }\n\n  _onRecoveredEarlyEof() {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\n    });\n  }\n\n  _onMediaInfo(mediaInfo) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.MEDIA_INFO, mediaInfo);\n    });\n  }\n\n  _onMetaDataArrived(metadata) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\n    });\n  }\n\n  _onScriptDataArrived(data) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\n    });\n  }\n\n  _onStatisticsInfo(statisticsInfo) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, statisticsInfo);\n    });\n  }\n\n  _onIOError(type, info) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\n    });\n  }\n\n  _onDemuxError(type, info) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\n    });\n  }\n\n  _onRecommendSeekpoint(milliseconds) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, milliseconds);\n    });\n  }\n\n  _onLoggingConfigChanged(config) {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'logging_config',\n        param: config\n      });\n    }\n  }\n\n  _onWorkerMessage(e) {\n    let message = e.data;\n    let data = message.data;\n\n    if (message.msg === 'destroyed' || this._workerDestroying) {\n      this._workerDestroying = false;\n\n      this._worker.terminate();\n\n      this._worker = null;\n      return;\n    }\n\n    switch (message.msg) {\n      case TransmuxingEvents.INIT_SEGMENT:\n      case TransmuxingEvents.MEDIA_SEGMENT:\n        this._emitter.emit(message.msg, data.type, data.data);\n\n        break;\n\n      case TransmuxingEvents.LOADING_COMPLETE:\n      case TransmuxingEvents.RECOVERED_EARLY_EOF:\n        this._emitter.emit(message.msg);\n\n        break;\n\n      case TransmuxingEvents.MEDIA_INFO:\n        Object.setPrototypeOf(data, MediaInfo.prototype);\n\n        this._emitter.emit(message.msg, data);\n\n        break;\n\n      case TransmuxingEvents.METADATA_ARRIVED:\n      case TransmuxingEvents.SCRIPTDATA_ARRIVED:\n      case TransmuxingEvents.STATISTICS_INFO:\n        this._emitter.emit(message.msg, data);\n\n        break;\n\n      case TransmuxingEvents.IO_ERROR:\n      case TransmuxingEvents.DEMUX_ERROR:\n        this._emitter.emit(message.msg, data.type, data.info);\n\n        break;\n\n      case TransmuxingEvents.RECOMMEND_SEEKPOINT:\n        this._emitter.emit(message.msg, data);\n\n        break;\n\n      case 'logcat_callback':\n        Log.emitter.emit('log', data.type, data.logcat);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n}\n\nexport default Transmuxer;","map":null,"metadata":{},"sourceType":"module"}