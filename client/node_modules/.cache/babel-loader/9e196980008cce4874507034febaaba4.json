{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport EventEmitter from 'events';\nimport Log from './logger.js';\n\nclass LoggingControl {\n  static get forceGlobalTag() {\n    return Log.FORCE_GLOBAL_TAG;\n  }\n\n  static set forceGlobalTag(enable) {\n    Log.FORCE_GLOBAL_TAG = enable;\n\n    LoggingControl._notifyChange();\n  }\n\n  static get globalTag() {\n    return Log.GLOBAL_TAG;\n  }\n\n  static set globalTag(tag) {\n    Log.GLOBAL_TAG = tag;\n\n    LoggingControl._notifyChange();\n  }\n\n  static get enableAll() {\n    return Log.ENABLE_VERBOSE && Log.ENABLE_DEBUG && Log.ENABLE_INFO && Log.ENABLE_WARN && Log.ENABLE_ERROR;\n  }\n\n  static set enableAll(enable) {\n    Log.ENABLE_VERBOSE = enable;\n    Log.ENABLE_DEBUG = enable;\n    Log.ENABLE_INFO = enable;\n    Log.ENABLE_WARN = enable;\n    Log.ENABLE_ERROR = enable;\n\n    LoggingControl._notifyChange();\n  }\n\n  static get enableDebug() {\n    return Log.ENABLE_DEBUG;\n  }\n\n  static set enableDebug(enable) {\n    Log.ENABLE_DEBUG = enable;\n\n    LoggingControl._notifyChange();\n  }\n\n  static get enableVerbose() {\n    return Log.ENABLE_VERBOSE;\n  }\n\n  static set enableVerbose(enable) {\n    Log.ENABLE_VERBOSE = enable;\n\n    LoggingControl._notifyChange();\n  }\n\n  static get enableInfo() {\n    return Log.ENABLE_INFO;\n  }\n\n  static set enableInfo(enable) {\n    Log.ENABLE_INFO = enable;\n\n    LoggingControl._notifyChange();\n  }\n\n  static get enableWarn() {\n    return Log.ENABLE_WARN;\n  }\n\n  static set enableWarn(enable) {\n    Log.ENABLE_WARN = enable;\n\n    LoggingControl._notifyChange();\n  }\n\n  static get enableError() {\n    return Log.ENABLE_ERROR;\n  }\n\n  static set enableError(enable) {\n    Log.ENABLE_ERROR = enable;\n\n    LoggingControl._notifyChange();\n  }\n\n  static getConfig() {\n    return {\n      globalTag: Log.GLOBAL_TAG,\n      forceGlobalTag: Log.FORCE_GLOBAL_TAG,\n      enableVerbose: Log.ENABLE_VERBOSE,\n      enableDebug: Log.ENABLE_DEBUG,\n      enableInfo: Log.ENABLE_INFO,\n      enableWarn: Log.ENABLE_WARN,\n      enableError: Log.ENABLE_ERROR,\n      enableCallback: Log.ENABLE_CALLBACK\n    };\n  }\n\n  static applyConfig(config) {\n    Log.GLOBAL_TAG = config.globalTag;\n    Log.FORCE_GLOBAL_TAG = config.forceGlobalTag;\n    Log.ENABLE_VERBOSE = config.enableVerbose;\n    Log.ENABLE_DEBUG = config.enableDebug;\n    Log.ENABLE_INFO = config.enableInfo;\n    Log.ENABLE_WARN = config.enableWarn;\n    Log.ENABLE_ERROR = config.enableError;\n    Log.ENABLE_CALLBACK = config.enableCallback;\n  }\n\n  static _notifyChange() {\n    let emitter = LoggingControl.emitter;\n\n    if (emitter.listenerCount('change') > 0) {\n      let config = LoggingControl.getConfig();\n      emitter.emit('change', config);\n    }\n  }\n\n  static registerListener(listener) {\n    LoggingControl.emitter.addListener('change', listener);\n  }\n\n  static removeListener(listener) {\n    LoggingControl.emitter.removeListener('change', listener);\n  }\n\n  static addLogListener(listener) {\n    Log.emitter.addListener('log', listener);\n\n    if (Log.emitter.listenerCount('log') > 0) {\n      Log.ENABLE_CALLBACK = true;\n\n      LoggingControl._notifyChange();\n    }\n  }\n\n  static removeLogListener(listener) {\n    Log.emitter.removeListener('log', listener);\n\n    if (Log.emitter.listenerCount('log') === 0) {\n      Log.ENABLE_CALLBACK = false;\n\n      LoggingControl._notifyChange();\n    }\n  }\n\n}\n\nLoggingControl.emitter = new EventEmitter();\nexport default LoggingControl;","map":null,"metadata":{},"sourceType":"module"}